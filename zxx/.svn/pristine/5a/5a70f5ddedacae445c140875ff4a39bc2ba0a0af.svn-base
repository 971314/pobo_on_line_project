/**
 * Created by kuo zi on 2016/10/18.
 */
import Vue from "vue";
import resource from "vue-resource";
import restUrl from "./config/restUrl";
import {Toast} from "mint-ui";
import {projectPath,PrefixImg} from "./config/constants";

Vue.use(resource);

//全局混合
Vue.mixin({
    data() {
        return {
            // 图片服务器前缀
            PrefixImg: PrefixImg
        }
    },
    methods: {
        /**
         *get请求
         * @param restKey restUrl对应的键
         * @param join url拼接
         */
        $get(restKey, join, options, noloading) {
            if (!noloading) {
                this.$loading();
            }
            return new Promise((resolve, reject) => {
                this.$http.get(join ? projectPath + restUrl[restKey].url + "/" + join : projectPath + restUrl[restKey].url, options)
                    .then((res) => {
                        if (!noloading) {
                            this.$loaded();
                        }
                        if (res.body.code == 0) {
                            resolve(res.body.data);
                        } else if (res.body.code == 999) {
                            this.$router.push("login");
                        } else {
                            if (restKey != 'auth') {
                                Toast(res.body.message);
                            }
                            reject();
                        }
                    }, () => {
                        Toast("请求服务器失败，请稍后再试");
                        this.$loaded();
                        reject();
                    });
            });
        },
        /**
         *post请求
         * @param restKey restUrl对应的键
         * @param params 请求参数
         */
        $post(restKey, params, join, options, noloading) {
            if (!noloading) {
                this.$loading();
            }
            return new Promise((resolve, reject) => {
                this.$http.post(join ? projectPath + restUrl[restKey].url + "/" + join : projectPath + restUrl[restKey].url, params, options)
                    .then((res) => {
                        if (!noloading) {
                            this.$loaded();
                        }
                        if (res.body.code == 0) {
                            resolve(res.body.data);
                        } else {
                            if (restKey != 'auth') {
                                Toast(res.body.message);
                            }
                            reject();
                        }
                    }, () => {
                        Toast("请求服务器失败，请稍后再试");
                        this.$loaded();
                        reject();
                    });
            });
        },
        /**
         * [$back description]返回事件
         * @return {[type]} [description]
         */
        $back() {
            window.history.back("-1");
        },
        $loading() {
            this.$store.commit("loading");
        },
        $loaded() {
            this.$store.commit("loaded");
        },
        /**
         * [$encodeURI description] encode url 默认encode当前url
         * @param  {[type]} url [description]
         * @return {[type]}     [description]
         */
        $encodeURI(url) {
            return window.encodeURIComponent(url ? url : window.location);
        },
        /**
         * [$decodeURI description] decode url
         * @param  {[type]} url [description]
         * @return {[type]}     [description]
         */
        $decodeURI(url) {
            return window.decodeURIComponent(url);
        },
        $getParam(key, url) {
            var reg = new RegExp("(^|&)" + key + "=([^&]*)(&|$)");
            var r = (url ? url : window.location).search.substr(1).match(reg);
            if (r != null) return decodeURI(r[2]);
            return null;
        }
    }
});
